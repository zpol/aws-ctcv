#!/bin/bash

# This script helps you to extract ALL the AWS regions that DO NOT SUPPORT the rule you're checking. 
# Basically extracts all the security controls list and availability per AWS region and check if the AWS Control Tower Security Control that you're checking is 
# available or not in that region and it compares it with the REGIONS_ARRAY. 
# This way it can help you to filter the almost 400 ruiles that AWS have in all the security frameworks right now and let you apply the ones that you're sure that
# are not going to collide with your LandingZone and ControlTower regions configuration.

# If you enter a security control and there's nothign shown by the script is probably an OK snd GO, but always double check! ;) 
# 
# CONFIGURATION: Edit the REGIONS_ARRAY in order to make it compliance with your environment.
#
# Usage: ./aws-ctcv.sh <rule>
# Example: ./aws-ctcv.sh WAF.6
#		   ./aws-ctcv.sh -f <filename>
#		   ./aws-ctcv.sh -r 



DB_FILE="controls.db"			# all controls available from AWS website ( this file is autogenerated!! )
REGIONS_DB_FILE="regions.db" 	# all availabke AWS regions
DB_NEW_FILE="controls.new"
TMP_FILE="/tmp/$(pwgen -1).tmp"
AWS_CONTROLS_URL="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-regions.html#securityhub-regions-control-support"

function b() {
	echo "IOKjjuKjsSDioYfiorgg4qKO4qGRCiDioIfioLgg4qCf4qC7IOKgouKgnAo="|base64 -d
	echo "IOKijuKhkSDiooDioYAg4qKA4qOAIOKhgOKigCDioYDio4Ag4qCEIOKjsOKhgCDioYDiooAgICAg4qGO4qCRIOKigOKhgCDio4DioYAg4qOw4qGAIOKhgOKjgCDiooDioYAg4qGHIOKigOKjgCAgIOKhjuKgkSDio4fioYAg4qKA4qGAIOKigOKjgCDioYfioaAg4qKA4qGAIOKhgOKjgAog4qCi4qCcIOKgo+KgrSDioKPioKQg4qCj4qC8IOKgjyAg4qCHIOKgmOKgpCDio5Hiobog4qCJ4qCJIOKgo+KglCDioKPioJwg4qCH4qC4IOKgmOKgpCDioI8gIOKgo+KgnCDioKMg4qCt4qCVICAg4qCj4qCUIOKgh+KguCDioKPioK0g4qCj4qCkIOKgj+KgoiDioKPioK0g4qCPIAoKCgo=" |base64 -d 
}

if [ $# -lt 1 ]; then
	b
    echo "Usage: $0 <control>"
    echo "I.e.: $0 WAF.5"
	echo ""
    echo "NOTE: The search is CASE SENSITIVE"
    echo "-------------------------------------------"
    echo "Options: "
    echo -e " -f <filename>\tSpecify an input file to analyze"
    echo -e " -r\t\tShow all AWS regions"
	echo -e " -u\t\tShow all Security Controls & allow for search"
    echo ""
	echo "You can find a list of all unavailable AWS security controls in the following URL: "
	echo "https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-regions.html#securityhub-regions-control-support"
    exit 1
fi

# Please fill up the regions you're working with in ControlTower AND / OR LandinZone
# If not the script is mainly useless :) 
# Keep in mind that even tha script says that the region is available to enable that control it may depends in last instance from AWS and your current setup & configurations.
REGIONS_ARRAY=("af-south-1" "ap-east-1" "ap-northeast-1" "ap-northeast-2" "ap-northeast-3" "ap-south-1" "ap-south-2" "ap-southeast-1" "ap-southeast-2" "ap-southeast-3" "ca-central-1" "eu-central-1" "eu-central-2" "eu-north-1" "eu-south-1" "eu-south-2" "eu-west-1" "eu-west-2" "eu-west-3" "il-central-1" "me-central-1" "me-south-1" "sa-east-1" "us-east-1" "us-east-2" "us-west-1" "us-west-2")

re="\e[31m"
gr="\e[32m"
ye="\e[33m"
nc="\e[0m"

function extract_rule_id() {
	# this function extracts the proper security control code in form [<SERVICE>.<NUM>]
	# due to in the aws doc page the ID's clasification is slightly different. [<srv>.<srv>.<num>]
	cat  $1 |awk -F . {' print $2"."$3 '} | awk {' print $1 '} | sed "s|]$||"
}

function get_control_rules_from_aws() {
	# get the control rules and verify if changed
	echo ">> Updating ControlTower security controls list from AWS ............."
	echo ">> ${AWS_CONTROLS_URL}"
	curl -s $AWS_CONTROLS_URL > ${TMP_FILE}
	cat  ${TMP_FILE} |egrep -o ">.*<" | grep -v "<.*>" | sed "s|^>||" | sed "s|<||" |grep -v "^$" |grep "^US\|^Asia\|^Africa\|^Europe\|^Israel\|^China\|^Middle\|^South\|^AWS Gov\|^Cana\|^\[.*" > ${DB_NEW_FILE}
	
	
}

function check_dbfile() {
	# check if there's some new controls in the AWS website 
	dbfile=$1
	if [ -f ${dbfile} ]
	then 
		get_control_rules_from_aws
		MD5SUM_NEW=$(md5sum ${DB_NEW_FILE}| awk {' print $1 '})
		MD5SUM_CURRENT=$(md5sum ${dbfile}| awk {' print $1 '})
		last_modified=$(stat ${dbfile} | grep "Modif")
		echo ">> The AWS controlTower control rules file exists (${last_modified}) - MD5: ${MD5SUM_CURRENT}"	
		if [ "${MD5SUM_NEW}" == "${MD5SUM_CURRENT}" ]
		then
			echo ">> There are no changes in control rules database...Current MD5: ${MD5SUM_CURRENT} - New MD5:${MD5SUM_NEW} "
			echo ">> Continuing... "
		else
			echo ">> There are some changes, rebuilding controls database,..."
			echo ">> Current MD5: ${MD5SUM_CURRENT} - New MD5: ${MD5SUM_NEW}"
		fi
	else
		echo ">> AWS ControlTower control rules document does not exist, creating it,....."
		get_control_rules_from_aws
		mv controls.new ${DB_FILE}
	fi
}

function check_against_se_regions() {

	# this function will check against our company regions enabled it there's a conflict with the rule
	aws_region=$1
	match=0

	# run trhough the array and check 4 match
	for r in "${REGIONS_ARRAY[@]}"
	do
		#echo "${r} - ${aws_region}"
		if [ "${r}" == "${aws_region}" ]
		then 
			match=1
			break
		fi
	done

	if [ ${match} == "1" ]
	then 
		echo -e "${re}>> AWS region [ ${ye}$(cat ${REGIONS_DB_FILE}|grep "${aws_region}" |cut -d, -f1,2 |sort -u) ${re}] CONFLICTS!!!${nc}"
	#else
	#	echo  -e "${gr}>> AWS region: [ ${ye} $(cat ${REGIONS_DB_FILE}|grep "${aws_region}" |cut -d, -f1,2 |sort -u) ${gr}] is compliance to enable ${rule}${nc}"
	fi
}

function verifier() {
	control="$1"
	found=false
	region=""

	echo ">> The following regions CAN NOT have this control enabled in your company"
	echo "---------------------------------------------------------------------------"
	#echo ${REGIONS_ARRAY[@]}
		while IFS= read -r line; do
	    if [[ "$line" =~ ^[A-Z][a-zA-Z\ ]+\ \(.+\)$ ]]; then
		region="${line}"
	    elif [[ "$line" == \[${control}\]* ]]; then
		found=true
		#cat ${REGIONS_DB_FILE}|grep "${region}"
		#echo -e -n "\e[91m$(cat ${REGIONS_DB_FILE}|grep "${region}"|sort -u)\e[0m\t${line}" | column -t -s" "
		#echo -e "${re}>> AWS region: [  $(cat ${REGIONS_DB_FILE} |grep "${region}"| cut -d, -f1,2 |sort -u) ] not suported"
		#echo ">> AWS region: [  $(cat ${REGIONS_DB_FILE} |grep "${region}"| cut -d, -f1,2 |sort -u) ] not suported"
		parsed_region=$(cat ${REGIONS_DB_FILE} |grep "${region}"| cut -d, -f2 |sort -u| sed "s| ||")
		check_against_se_regions "${parsed_region}" 
		#echo -e -n "\e[91m${region}\e[0m\t\t"
		#echo -e "\e[91m${line}\e[0m"
		#echo -e "${line}"
	    fi
	done < ${DB_FILE}
	echo "--------------------------------------------------------------------------"
	if [ "$found" = false ]; then
	    echo ">> Control '${control}' not found in any region."
	fi
}

function show_regions() {
	cat ${REGIONS_DB_FILE}|percol --prompt ">>> SELECT AN AWS REGION"
}

function show_controls() {
	cat ${DB_FILE}|percol --prompt "SEARCH ---- AWS SECURITY CONTROLS  ------ FULL UPDATED LIST"
}

b
case $1 in 
	-f) 	INFILE=$2
		#check_dbfile ${DB_FILE}
	    rules2check=$(extract_rule_id ${INFILE})
		for rule in ${rules2check}
		do
			verifier ${rule}
		done;;

	-r) show_regions;;
	-all) show_controls;;

	*)	RULE=$1 
		#check_dbfile ${DB_FILE}
		verifier ${RULE}
		;;
esac


